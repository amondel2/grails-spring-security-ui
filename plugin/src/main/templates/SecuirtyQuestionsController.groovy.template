package  ${packageName}

import grails.plugin.springsecurity.SpringSecurityUtils
import grails.validation.ValidationException

class ${saClassName}Controller extends grails.plugin.springsecurity.ui.AbstractS2UiDomainController {

     ${saClassName}Service ${saClassName.toLowerCase()}Service
    
        static allowedMethods = [save: "POST", update: "PUT", delete: "DELETE"]

        def search() {

            }

            protected Class<?> getClazz() { ${saClassName} }
            protected String getClassLabelCode() { '${propertyName}.label' }

            protected Map model(${propertyName}, String action) {

                    [ ${propertyName}: ${propertyName}]

            }
    
        def index(Integer max) {
            params.max = Math.min(max ?: 10, 100)
            def model = [:]
            model.results = ${saClassName.toLowerCase()}Service.list(params)
            model.totalCount = ${saClassName.toLowerCase()}Service.count()
            addQueryParamsToModelForPaging(model,
              <% for(int i=1; i <= numberOfQuestions.toInteger(); i++) {  %>
               'myQuestion${i}','myAnswer${i}',
               <%  } %>
            'id', '${userPropName}.id'
            )
            render view: 'index', model: model
        }
    
        def show(Long id) {
            respond ${saClassName.toLowerCase()}Service.get(id)
        }
    
        def create() {
            respond new ${saClassName}(params), model : ['users': ${userPropName.capitalize()}.list(),'lookupProp':SpringSecurityUtils.securityConfig.userLookup.usernamePropertyName]
        }
    
        def save(${saClassName} ${saClassName.toLowerCase()}) {
            if (${saClassName.toLowerCase()} == null) {
                notFound()
                return
            }
    
            try {
                ${saClassName.toLowerCase()}Service.save(${saClassName.toLowerCase()})
            } catch (ValidationException e) {
                respond ${saClassName.toLowerCase()}.errors, view:'create', model : ['users': ${userPropName.capitalize()}.list(),'lookupProp':SpringSecurityUtils.securityConfig.userLookup.usernamePropertyName]
                return
            }
    
            request.withFormat {
                form multipartForm {
                    flash.message = message(code: 'default.created.message', args: [message(code: '${saClassName.toLowerCase()}.label', default: 'Security Questions'), ${saClassName.toLowerCase()}.id])
                    redirect ${saClassName.toLowerCase()}
                }
                '*' { respond ${saClassName.toLowerCase()}, [status: CREATED] }
            }
        }
    
        def edit(Long id) {
            respond ${saClassName.toLowerCase()}Service.get(id)
        }
    
        def update(${saClassName} ${saClassName.toLowerCase()}) {
            if (${saClassName.toLowerCase()} == null) {
                notFound()
                return
            }
    
            try {
                ${saClassName.toLowerCase()}Service.save(${saClassName.toLowerCase()})
            } catch (ValidationException e) {
                respond ${saClassName.toLowerCase()}.errors, view:'edit'
                return
            }
    
            request.withFormat {
                form multipartForm {
                    flash.message = message(code: 'default.updated.message', args: [message(code: '${saClassName.toLowerCase()}.label', default: 'Security Questions'), ${saClassName.toLowerCase()}.id])
                    redirect ${saClassName.toLowerCase()}
                }
                '*'{ respond ${saClassName.toLowerCase()}, [status: OK] }
            }
        }
    
        def delete(Long id) {
            if (id == null) {
                notFound()
                return
            }
    
            ${saClassName.toLowerCase()}Service.delete(id)
    
            request.withFormat {
                form multipartForm {
                    flash.message = message(code: 'default.deleted.message', args: [message(code: '${saClassName.toLowerCase()}.label', default: '${saClassName}'), id])
                    redirect action:"index", method:"GET"
                }
                '*'{ render status: NO_CONTENT }
            }
        }
    
        protected void notFound() {
            request.withFormat {
                form multipartForm {
                    flash.message = message(code: 'default.not.found.message', args: [message(code: '${saClassName.toLowerCase()}.label', default: '${saClassName}'), params.id])
                    redirect action: "index", method: "GET"
                }
                '*'{ render status: NOT_FOUND }
            }
        }

}